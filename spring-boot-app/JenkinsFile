pipeline {
  agent {
    docker {
      image 'rezuanul/maven-docker-jdk:3.8.3-jdk-17'
      args '--user 114:123 -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/jenkins/workspace:/var/lib/jenkins/workspace'
    }
  }
  stages {
    stage('Clean Workspace') {
      steps {
        script {
          def container = docker.image('rezuanul/maven-docker-jdk:3.8.3-jdk-17').run(
            '--user 114:123 -v /var/lib/jenkins/workspace/my-project:/var/lib/jenkins/workspace/my-project -v /var/run/docker.sock:/var/run/docker.sock'
          )
          try {
            container.inside {
              sh '/bin/bash -c "rm -rf /var/lib/jenkins/workspace/my-project/*"'
            }
          } finally {
            container.stop()
          }
        }
      }
    }
    stage('Checkout') {
      steps {
        ws(workspace) {
          git branch: 'main', url: 'https://github.com/RHShamil/ci-cd-project.git'
          script {
            def container = docker.image('rezuanul/maven-docker-jdk:3.8.3-jdk-17').run(
              '--user 114:123 -v /var/lib/jenkins/workspace/my-project:/var/lib/jenkins/workspace/my-project -v /var/run/docker.sock:/var/run/docker.sock'
            )
            try {
              container.inside {
                sh '/bin/bash -c "echo passed"'
              }
            } finally {
              container.stop()
            }
          }
        }
      }
    }
    stage('Build and Test') {
      steps {
        script {
          def container = docker.image('rezuanul/maven-docker-jdk:3.8.3-jdk-17').run(
            '--user 114:123 -v /var/lib/jenkins/workspace/my-project:/var/lib/jenkins/workspace/my-project -v /var/run/docker.sock:/var/run/docker.sock'
          )
          try {
            container.inside {
              sh '/bin/bash -c "ls -ltr"'
              sh '/bin/bash -c "cd spring-boot-app && mvn clean package"'
            }
          } finally {
            container.stop()
          }
        }
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = 'http://4.194.91.3:9000'
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          script {
            def container = docker.image('rezuanul/maven-docker-jdk:3.8.3-jdk-17').run(
              '--user 114:123 -v /var/lib/jenkins/workspace/my-project:/var/lib/jenkins/workspace/my-project -v /var/run/docker.sock:/var/run/docker.sock'
            )
            try {
              container.inside {
                sh "/bin/bash -c \"cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=$SONAR_URL\""
              }
            } finally {
              container.stop()
            }
          }
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "rezuanul/demojavaapp:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          def container = docker.image('rezuanul/maven-docker-jdk:3.8.3-jdk-17').run(
            '--user 114:123 -v /var/lib/jenkins/workspace/my-project:/var/lib/jenkins/workspace/my-project -v /var/run/docker.sock:/var/run/docker.sock'
          )
          try {
            container.inside {
              sh "/bin/bash -c \"cd spring-boot-app && docker build -t $DOCKER_IMAGE .\""
            }
            def dockerImage = docker.image("$DOCKER_IMAGE")
            docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
              dockerImage.push()
            }
          } finally {
            container.stop()
          }
        }
      }
    }
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = 'ci-cd-project'
        GIT_USER_NAME = 'RHShamil'
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          script {
            def container = docker.image('rezuanul/maven-docker-jdk:3.8.3-jdk-17').run(
              '--user 114:123 -v /var/lib/jenkins/workspace/my-project:/var/lib/jenkins/workspace/my-project -v /var/run/docker.sock:/var/run/docker.sock'
            )
            try {
              container.inside {
                sh '''
                  /bin/bash -c "
                  git config user.email 'rezwanul.shamil@gmail.com'
                  git config user.name 'RHShamil'
                  sed -i 's|image: rezuanul/demojavaapp:.*|image: rezuanul/demojavaapp:${BUILD_NUMBER}|g' spring-boot-app-manifests/deployment.yml
                  git add spring-boot-app-manifests/deployment.yml
                  git commit -m 'Update deployment image to version ${BUILD_NUMBER}'
                  git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                  "
                '''
              }
            } finally {
              container.stop()
            }
          }
        }
      }
    }
  }
}
